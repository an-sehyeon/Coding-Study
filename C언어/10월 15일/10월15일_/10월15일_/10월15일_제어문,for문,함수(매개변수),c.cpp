//
//
// [중첩 while문 전체 벗어나기]
//  5 x 5 = 25까지 출력하고 나머지 출력 x
//

 //#include <stdio.h>
 //int main(void) {

	//int dan = 2;
	//int i = 1;
	//int flag = 0;

	//while (dan <= 9) {			// dan수에 대한 while 반복문
	//	i = 1;
	//	printf("---------------%d단----------------------\n", dan);
	//	while (i <= 9) {
	//		printf("%d x %d = %d\n", dan, i, dan * i);

	//		if (dan == 5 && i == 5) {
	//			flag = 1;
	//			break;
	//		}
	//		i++;

	//	}

	//	if (flag == 1) {
	//		break;
	//	}

	//	printf("\n");
	//	dan++;
	//}
 //} 

//================================================================== =
//
// [제어문 - continue]
// - continue : 아래 코드 무시 및 반복문의 조건식으로 회기하여 다음 반복 실행.
//
// ### break와 continue의 차이점 ###
// - break는 소속된 코드 블럭을 즉시 탈출
// - continue는 소속된 코드 블럭(현재 실행중인 반복문) 을 무시하고 조건식으로 돌아가 다음 반복을 시작
//
// 1부터 10까지의 수 중에 3의 배수는 제외하고 출력
//
//
 /*#include <stdio.h>
 int main() {

	int i = 1;

	while (i <= 10) {
		if (i % 3 == 0) {
			i++;
			continue;
		}
		printf(" i = %d\n", i);
		i++;
	}
	return 0;
*/
//}
//
//
//
//================================================================== =
//
//
// [문제]
// - 사용조건 : while, if, confinue, break
// - 1부터 100까지의 수 중에서 5의 배수만 더하고, 50을 넘어가면 반복문을 중단
// - 1~50까지 출력(단, 5의 배수는 출력되지 말아야함)
// - 5의 배수의 합도 출력
// - hint : 5의 배수의 합에 대한 처리를 해줄 변수가 필요 == sum 누적 합을 처리해줄 변수가 필요함
//
//
// #include <stdio.h>	
// int main() {
//
//	int i = 1;
//	int sum = 0;
//
//	while (i <= 100) {				// 1부터 100까지의 수를 반복
//
//		if (i > 50) {				// 50까지 출력을 하기 위해 50이넘어가면 브레이크
//			break;
//		}
//
//		if (i % 5 == 0) {				// if문 본체에 들어올 수 있는 애들은 5의 배수
//			sum += i;				// 5의 배수의 합을 구하기 위해 sum에 5의 배수를 저장해주고 
//			i++;					// 누적 합산을 해줌
//			continue;
//		}
//
//		printf("%d\n", i);
//		i++;
//
//	}
//	printf("5의 배수의 총 합은%d입니다.\n", sum);
//	return 0;
//}
//
//
//================================================================== =
//
//
//[for문 구조]
//- 반복 횟수를 미리 정해놓고 반복을 수행하는 구조
//
//for (초기식; 조건식; 증감식) {
//	조건식이 참일 때 수항할 코드
//}
//
//
//================================================================== =
//
//
//[for문의 동작원리]
//- 1. 초기식에는 변수 초기화가 일어난다.이때 초기화된 변수를 for문 블럭{} 안에서 사용할 수 있다.
//- 2. 조건식을 평가
//- 3. 조건이 참일 경우 for문 실행한다. (거짓일 때 for문 탈출)
//- 4. 증감식으로 회기하여 증감식 실행.
//- 5. 다시 조건식 판별
//
//
//#include <stdio.h>
//int main(void) {
//
//	printf("-----------------while문----------------\n");
//	int i = 0;					// 초기값						
//
//	while (i <= 10) {				// 조건식
//		printf("i = %d\n", i);
//		i++;					// 증감연산
//	}
//	printf("\n");
//
//	printf("------------------for문-------------------\n");
//
//	for (int i = 0; i < 11; i++) {
//		printf("i = %d\n", i);
//	}
//	return 0;
//}
//
//
//
//================================================================== =
//
//
//[for문을 활용한 1부터 10까지의 합]
//
//
//#include <stdio.h>
//int main(void) {
//
//	int sum = 0;
//
//	for (int i = 1; i <= 10; i++) {
//		sum = sum += i;
//	}
//	printf("1부터 10까지의 합 : %d\n", sum);
//	return 0;
//}
//
//
//
//
//
//================================================================== =
//
//
//[문제]
//- 1부터 N까지의 수의 합을 출력(N은 사용자로부터 입력받는다)
//- for문으로 만들어라
//
//
//#include <stdio.h>
//int main(void) {
//
//	printf("정수를 입력하세요>>>\n");
//	int sum = 0;
//	int num;
//	scanf_s("%d", &num);
//
//	for (int i = 1; i <= num; i++) {
//		sum = sum += i;
//		printf("1부터 %d까지의 합산 : %d\n", num, sum);
//	}
//	printf("\n");
//	int all = sum;
//	printf("1부터 %d까지의 총합계 : %d\n", num, all);
//	return 0;
//}
//
//
//================================================================== =
//
//
//[문제]
//- 별 찍기
//* ****
//****
//***
//**
//*
//
//
//개행		별의 수
//(i)		(j)
//
//0		5	(5 - 0)
//1		4	(5 - 1)
//2		3	(5 - 2)
//3		2	(5 - 3)
//4		1	(5 - 4)
//
//n - 1		n - i(n - 1) == 1
//
//
//
//#include <stdio.h>
//int main(void) {
//
//	for (int i = 0; i <= 5; i++) {
//		for (int j = 0; j < 5 - i; j++) {
//			printf("*");
//		}
//		printf("\n");
//	}
//
//	return 0;
//}
//
//
//
//================================================================== =
//
//
//[문제]
//- 1부터 100까지의 수 중에서 홀수의 합과 짝수의 합을 출력하시오
//
//
//#include <stdio.h>
//int main(void) {
//
//	int sum = 0;				//짝수
//	int sum1 = 0;				//홀수
//
//	for (int i = 1; i <= 100; i++) {
//
//		if (i % 2 == 0) {
//			sum += i;
//
//		}
//
//		else {
//			sum1 += i;
//
//		}
//	}
//	printf("짝수의 합은 %d입니다.\n", sum);
//	printf("홀수의 합은 %d입니다.\n", sum1);
//
//	return 0;
//}
//
//
//
//
//
//================================================================== =
//
//
//[문제]
//- 1부터 100까지의 숫자 중에서 3과 5의 공배수일 때 "FizzBuzz",
//-3의 배수일 때 "Fizz",
//-5의 배수일 때 "Buzz"를 출력하고
//- 그 외의 숫자는 그대로 출력하는 프로그램을 작성
//
//
//
//#include <stdio.h>
//int main() {
//
//	for (int i = 1; i <= 100; i++) {
//		if (i % 15 == 0) {
//			printf("FizzBuzz\n");
//		}
//		else if (i % 3 == 0) {
//			printf("Fizz\n");
//		}
//		else if (i % 5 == 0) {
//			printf("Buzz\n");
//		}
//		else {
//			printf("%d\n", i);
//		}
//	}
//}
//
//
//
//================================================================== =
//
//
//[함수]
//- 함수(function)란 ? : 하나의 특정한 목적의 작업을 수행하기 위한 코드들의 집합
//- 이것 역시 프로그램의 일종인데, IDLE과 같은 개발자를 위한 Tool도 프로그램이지만
//- 함수는 그 내부에 좀더 작은 단위의 프로그램으로 볼 수 있다.
//
//- 즉 프로그램은 여러 개의 함수들로 이루어져 있다.
//- 제일 먼저 호출되는 함수는 main()함수
//
//- 함수는 모듈화에 사용된다.
//
//- 함수 호출(function call) 이란 ? : 간단히 말해서, 함수 사용을 위해서 함수를 부른다.호출한다는 의미
//- 함수는 입력을 받아 출력을 생성하는데 이는 커피자판기로 예로 들 수 있다.
//
//- Ex) 커피자판기에 동전을 넣는다. (입력)
//-Ex) 내가 원하는 커피가 나온다. (출력)
//-Ex) 입력값은 100원, 200원, 500원, 1000원 등이 있을 수 있고
//- Ex) 출력값은 카라멜 마끼아또, 에스프레소, 아메리카노 등이 있을 수 있다.
//
//
//================================================================== =
//
//
//[모듈]
//- 모듈이란 ? : 프로그래밍에서의 모듈은 프로그램을 구성하는 구성 요소의 일부
//Ex) 계산기의 더하기 기능, 빼기 기능 등등
//- 이 모듈은 관련 데이터와 함수들의 집합, 즉 이런것들이 모여서 모듈을 형성함
//Ex) 더하기 기능은 여러 함수와 코드들이 합쳐져서 만들어진 기능
//
//- 모듈화란 ? : 각가의기능들을 파일별로 나뉘어 놓은걸 모듈화라고 한다.
//Ex) 계산기의 더하기나 빼기, 나누기 기능들을 파일별려 나누어 관리하는 것이
//모듈화했다라고 한다.
//++) 그럼 계산기는 4개의 모듈이 필요함(덧셈, 뺄셈, 나눗셈, 곱셈)
//
//- 모듈러 프로그래밍 : 모듈 개념을 사용하는 프로그래밍 기법
//
//- 모듈화의 장점 : 하나의 프로그램(계산기)를 만들 때 이식, 확장, 유지보수 등이
//좋도록 한다.
//
//
//================================================================== =
//
//
//[함수의 종류]
//
//- 1. 사용자 정의 함수 : 개발을 위해 개발자가 직접 만드는 함수
//- 2. 라이브러리 함수 : 개발자들이 사용하기 편하게 미리 만들어져 제공되는 함수
//
//
//================================================================== =
//
//
//[함수의 헤더(function header)]
//
//- int			main(void)
//- retrun type(반환 자료형)	함수명		parameter(매개변수)
//
//- 함수의 몸체(function body) ==> {}
//
//
//================================================================== =
//
//
//[int main()과 int main(void)의 차이점]
//
//- int main()는 매개변수를 사용하거나 혹은 매개변수 없이 모두 사용가능함을 의미
//
//- int main(void)는 매개변수를 넣지 않고서만 동작함.
//
//- 따라서 int main(void)가 기술적으로 더 낫다고 판단하고 int main(void)가
//c에서 더 권장되는 방법임
//
//================================================================== =
//
//
//[void main()]
//
//- 실제로 void main() 을 사용하면 오류가 나진 않음.
//- return type(반환 자료형)에 int를 사용하는 것은 표준 c에서는 정상적인 실행의 경우
//main 함수는 return 0을 하기로 약속되어 있기 때문임(이는 실행 성공을 의미)
//
//- 그러나 return 0; 을 개발자가 하지 않아도 컴파일러가 허용하는 범위이기 때문에
//return 0; 없이도 실행이 되는 것임
//
//- 또한 main()은 return 0을 하기 때문에 int main()으로 적어줘야하지만 void main()으로
//적는 것 또한 컴파일러가 허용하는 범위 내 이기에 에러없이 실행이 됨
//
//- 추가적으로 main 함수가 반환되는 값을 사용하는 경우는 매우 드물기 때문에
//void main()은 일반적으로 프로그램의 실행에 아무런 문제가 없다.
//
//
//
//
//================================================================== =
//
//
//[함수 호출(function call) 의 로직]
//
//- 1. 함수 사용을 위해 main()함수에서 함수이름 호출
//- 2. 함수로 올라가 정의되어 있는 함수 몸체의 코드를 실행
//- 3. 다시 main()함수에서 호출했던 위치(함수 이름 적은 부분)로 돌아와 "결과값 전달"
//
//
//
//================================================================== =
//
//[함수 예제]
//
//#include <stdio.h>
//void PrintHello() {			// 함수의 헤더 (선언부)
//	 함수의 몸체 (정의부)
//	int n = 0;
//	printf("반복 횟수를 입력하세요>>>\n");
//	scanf_s("%d", &n);
//
//	for (int i = 0; i < n; i++) {
//		printf("Hello World\n");
//	}
//}
//int main(void) {
//
//	PrintHello();
//	PrintHello();
//
//	return 0;
//}
//
//
//================================================================== =
//
//
//[인수(argument)와 매개변수(parameter)]
//
//- 인수란 ? : 함수 호출 시 함수로 값을 전달해주는 변수
//
//- 매개변수란 ? : 함수 호출 시 인수로 전달된 값을 함수 내부에서 사용할 수 있도록 하는 변수
//- 매개변수는 함수 내에서 지역변수로 사용됨.
//- 매개변수는 함수 호출 시에 전달된 인수(argument) 값을 저장.
//
//================================================================== =
//
//[인수와 매개변수 예제]
//
//int sum1(int x, int y) {		// int x와 int y는 매개변수
//	return x + y;
//}
//
//#include <stdio.h>
//int main(void) {
//
//	int y = 0;
//	y = sum1(10, 22);		// 10과 22는 인수
//	printf("%d", y);
//
//}
//
//
//================================================================== =
//
//
//[함수의 형태]
//
//#include <stdio.h>
//int sum1(int x, int y) {		//매개변수 o, 반환값 o
//	return x + y;
//}
//
//int sum2() {			//매개변수 x, 반환값 o
//	printf("두 수를 입력하세요>>>");
//	int x = 0, y = 0;
//	scanf_s("%d%d", &x, &y);
//	return x + y;
//}
//
//int sum3(int x, int y) {		//매개변수 o, 반환값 x
//	printf("sum3(%d,%d) = %d\n", x, y, x + y);
//	return 0;
//}
//
//int sum4() {			//매개변수 x, 반환값 x
//	int x = 0, y = 0;
//	printf("두 수를 입력하세요>>>>");
//	scanf_s("%d%d", &x, &y);
//	printf("sum4의 두 수의 합 = %d\n", x + y);
//	return 0;
//}
//
//int main(void) {
//
//	int n1 = sum1(100, 300);
//	printf("sum1은 %d\n", n1);
//
//	int n2 = sum2();
//	printf("sum2는 %d입니다\n", n2);
//
//	sum3(1234, 140);
//
//	sum4();
//	return 0;
//}
//
//================================================================== =
//
//
//[문제]
//- 다음을 만족하는 함수를 만들어보시오
//- 반환 자료형은 int
//- 함수명 : sum
//- 매개변수 : 4개의 정수값을 다른 함수로부터(main) 전달 받음
//
//- 함수 내부에 if - else를 사용해서
//- 변수 2개 선언-- > 짝수의 합과 홀수의 합을 저장하는 각각의 변수 2개
//- 짝수는 짝수끼리 합출력
//- 홀수는 홀수끼리 합출력
//- 전달받은 모든 수의 합을 return하여
//- main함수에서 result라는 변수에 담아 printf를 써서 출력하시오.
//
//
//
//
//#include <stdio.h>
//int sum(int a, int b, int c, int d) {		// 함수명 : sum, 매개변수 : a,b,c,d
//
//	int evn = 0;			// 짝수의 합을 담아줄 변수
//	int odd = 0;			// 홀수의 합을 담아줄 변수
//
//	if (a % 2 == 0) {			// a가 짝수라면
//		evn += a;				// evn변수에 담아주고
//	}
//	else {				// 홀수라면 
//		odd += a;			// odd변수에 담아라
//	}
//
//	if (b % 2 == 0) {
//		evn += b;
//	}
//	else {
//		odd += b;
//	}
//
//	if (c % 2 == 0) {
//		evn += c;
//	}
//	else {
//		odd += c;
//	}
//
//	if (d % 2 == 0) {
//		evn += d;
//	}
//	else {
//		odd += d;
//	}
//
//	printf("a의 값은 : %d\nb의 값은 : %d\nc의 값은 : %d\nd의 값은 : %d\n\n", a, b, c, d);
//	printf("짝수의 합은 %d입니다.>>>>\n", evn);
//	printf("홀수의 합은 %d입니다.>>>>\n", odd);
//
//
//	return 0;
//}
//
//int main(void) {
//
//	int result = sum(58, 523, 993, 72);		// result라는 변수에 sum함수를 담고 
//	printf("%d\n", result);			// 매개변수를 입력받아 출력
//
//
//}
//
//
//
