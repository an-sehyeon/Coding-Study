

 #include <stdio.h>
 int main() {
    	int num = 50000;
    	short svar = (short)num;
    	char cvar = (char)num;          // 강제 형변환

   	// 중간에 몇 비트가 사라진다.
    	// 그래서 앞의 부호가 음수로 작용 ==> 결과값이 달라진다.
    	// 이렇게 데이터 손실이 발생


      	 printf("svar = %d\n", svar);
   	 printf("cvar = %d\n", cvar);

    return 0;
 }


=================================================================



 #include <stdio.h>
 	int main() {
	
	int number1 = 97;
	char char1 = (char)number1;		// int형인 number1변수를 char형으로 형변환

  	 printf("%c\n", char1);

    	double number2 = 3.14;
  	number1 = (int)number2;      		// double형인 변수를 int형으로 형변환 함으로써
					// 소수점 이하 데이터 손실	
   	 printf("%d\n", number1);
    return 0;
 }



----------------------------------------------------------------------------------------------------------------------


 연산 시 자동, 강제 형변화

 나눗셈(실수)에서의 형 변환
 

 include <stdio.h>
 int main() {
	int num = 25;
	int div = 4;

	double result1 = num / div;				// 실수형인 result1에 정수형인 num과 div의 값을 나눈 값을 대입
	double result2 = (float)num / div;			// 자동형변환
							// 실수  / 정수의 결과값 = 실수
							//  (float)를 붙이면서 프로그래머가 강제로 형변환해주면서
							// 6.25  자체는 형 변환이 일어나지 않음

	printf("result1 = %f\n", result1);
	printf("result2 = %f\n", result2);

	return 0;


----------------------------------------------------------------------------------------------------------------------


 [ 01) Scanf 함수 : 정수값 입력받기 ]

 scanf() : 표준 입력 장치(키보드)로부터 값을 입력받을 때 사용하는 함수

 printf() : 모니터 출력 함수
 
 scanf에서의 f는 format을 뜻함. 즉, 서식문자를 사용한다는 의미

 scanf() : 키보드 		==> 		프로그램 내에서

 printf() : 프로그램 		==>		모니터



 원래 사용되어진 scnaf() 함수는 지정된 버퍼의 크기보다 더 많이 임의로 문자를 넣을 수 있었다.
 그래서 문제가 버퍼 오버 플로우가 생김. ( 버퍼 == 저장공간, 오버플로우(Over Flow) == 넘쳐흐르다 )
 즉 공간이 너무 꽉 차서 넘쳐 흘러 다른 공간을 침범하는 현상 발생

 이런 부분이 개선되어 Scanf_s() 함수가 생김
 인자값을 하나 더 줘야하는데 그것은 공간의 Size를 인자값으로 더 전달해야한다.


    


 #include <stdio.h>
 int main() {

 int num = 0;
 
 printf("정수를 1개 입력해주세요>>>");

 scanf_s("%d", &num);				// scanf_s()함수를 통해 사용자로부터 값을 입력 받고 num변수에 값을 저장
 printf("입력한 정수 값은 %d입니다\n", num);		*** & (참조 연산자) : 공간의 주소값을 반환함. ***


 return 0;
 }


----------------------------------------------------------------------------------------------------------------------


 [ 문제 01 ]
 
 정수 3개를 입력 받는 출력문을 작성하고
 세 수의 합 / 차 / 곱을 출력해보세요

 [ 결과값 ]
 큰 수 부터 차례로 정수 3개를 입력해주세요 >>> 30 20 10
 세 수의 합 : 60
 세 수의 차 : 0
 세 수의 곱 : 6000
 


   #include <stdio.h>
   int main() {
	
	// int자료형 변수 생성
	int num1 = 0, num2 = 0, num3 = 0, sum = 0, min = 0, mul = 0;

	printf("정수 3개를 입력해주세요>>>\n");
	scanf_s("%d %d %d", &num1, &num2, &num3);		// scanf_s()함수를 통해 3개의 값을 받아 num1,num2,num3 각각 변수에 저장
	sum = num1 + num2 + num3;			// 입력받은 num1,num2,num3 값을 모두 더한 값을 sum변수에 대입
	printf("세 수의 합은 %d입니다.\n\n", sum);


	printf("정수 3개를 입력해주세요>>>\n");
	scanf_s("%d %d %d", &num1, &num2, &num3);		
	min = num1 - num2 - num3;			// 입력받은 num1-num2-num3 값을 min변수에 대입
	printf("세 수의 차는 %d입니다.\n\n", min);


	printf("정수 3개를 입력해주세요>>>\n");
	scanf_s("%d %d %d", &num1, &num2, &num3);
	mul = num1 * num2 * num3;			// 입력받은 num1,num2,num3 값을 순서대로 곱한 값을 mul변수에 대입
	printf("세 수의 곱은 %d입니다.\n\n", mul);

 return 0;
 }

----------------------------------------------------------------------------------------------------------------------

 [ 02) 서식문자와 Scanf_s ]
 
 scanf()를 숫자 받기 + 문자 받기 위렇게 번갈아가며 입력 받을 시에 입력 사이에 rewind(studin)을
 넣어줘 버퍼공간을 초기화해주어야 함.
 그렇지 않으면 버퍼공간에 남아있는 글자나 문자 값들이 다음 입력값에 영향을 미침.

 rewind(studin) : Strean의 파일 위치 지시자(포인터)를 파일 시작 위치로 옮기는 함수
 		즉 버퍼에 남아있는 값들을 지우는 작업이라 생각하면 쉽다.


  #include <stdio.h>
  int main() {

	// 변수 선언
	int num1;
	double num2;
	char char1;

	printf("정수 한개를 입력해주세요 >>>");
	scanf_s("%d", &num1);
	printf("입력하신 정수는 %d입니다.\n", num1);

	printf("실수 한개를 입력해주세요 >>>");
	scanf_s("%lf", &num2);
	printf("입력하신 실수는 %lf입니다.\n", num2);

	rewind(stdin);		          // 미사용시 엔터를 한문자로 인식해 다음 scanf_s를 건너뛰고 printf() 함수 실행

	printf("문자 한글자를 입력해주세요 >>>");
	scanf_s("%c", &char1, sizeof(char1)); 	   // sizeof() 함수 : 메모리 공간을 몇 byte 차지하는지 확인하기 위한 함수
	printf("저장된 문자 : %c\n", char1);

	return 0;
 }

----------------------------------------------------------------------------------------------------------------------

 [ 문제 ]
 
 국어,영어,수학 점수를 받아 총점과 평균을 출력하세요
 ex) 국,영,수 입력 : 100 90 80
	총점 : 270
   	평균 : 90.00
 평균점수는 소수점 이하 2자리까지 출력
 나눗셈 과정을 할 때 소수점이하 값이 유지되도록 강제 형변환 처리

 
  #include <stdio.h>
  int main() {

	int kor = 0, eng = 0, mat = 0;				// int형 kor, eng, mat 변수 생성
		
	printf("국어 영어 수학 점수를 입력하세요>>>\n");

	scanf_s("%d%d%d", &kor, &eng, &mat);		// scanf_s()함수를 통해 3개의 값을 입력받고
							// 각각 kor, eng, mat 변수에 값을 저장
	int sum = kor + eng + mat;				// sum변수는 kor, eng, mat의 값을 모두 더한 값
	double ave = (float) sum / 3;				// 실수형인 ave변수는 정수형인 sum변수를 실수형으로 강제형변환후 sum의 값에서 3을 나눈 값

	printf("총점 : %d\n", sum);
	printf("평균 : %.2lf\n", ave);

	return 0;
 }

----------------------------------------------------------------------------------------------------------------------

 [ 문제 ] 

 다음 내용대로 입력 / 출력 작업

 당신의 이름은 무엇입니까? 홍길동
 홍길동 님의 나이는 몇살입니까? 22	홍길동은 서식문자를 사용하여 표현
 홍길동 님의 나이는 22세 입니다	홍길동과 나이를 서식문자를 사용하여 표현
 
 여기서 홍길동, 22은 고정된 값이 아니라 키보드로 입력값을 받는 변수입니다.
 다른 값을 넣었을 때 다른 값을 넣은대로 나와야합니다. 



 #include <stdio.h>
  int main() {

	char name[20];			// 문자형인 name변수에 20크기설정
	int age;

	printf("당신의 이름은 무엇입니까?");
	scanf_s("%s", &name,sizeof(name));	// %s인 문자열 서식문자를 통해 입력받은 값을 name변수에 저장(name의 size와 동일하게 설정)

	printf("%s님의 나이는 몇살입니까?",name);
	scanf_s("%d", &age);

	printf("%s님의 나이는 %d살입니다.",name, age);

	return 0;
 }

----------------------------------------------------------------------------------------------------------------------

 [ 대입 연산자 ]

 int a = 33, b = 10;

 printf("a + b = %d\n", a + b);	 덧셈
 printf("a - b = %d\n", a - b);	 빼기
 printf("a * b = %d\n", a * b);	 곱사기
 printf("a / b = %d\n", a / b);	 나누기 연산자 : 몫	
 printf("a %% b = %d\n", a % b);	 나머지 연산자 : 나머지




----------------------------------------------------------------------------------------------------------------------

 [ 복합대입 연산자 ]
 복합 대입 연산자 = 대입연산자 + 산술연산자


  #include <stdio.h>
  int main() {

	int a = 5, b = 10, c = 0;
	a += b;							// a = a + b 
	printf("a = %d\n", a);

	a -= b;							// a = a - b 
	printf("a = %d\n", a);

	a *= b;							// a = a * b 
	printf("a = %d\n", a);

	a /= b;							// a = a / b 
	printf("a = %d\n", a);

	return 0;
}




----------------------------------------------------------------------------------------------------------------------

 [ 비교 연산자 ]

 피연산들을 '비교'하여 참 / 거짓 값 반환
 참(true) : 1
 거짓(false) : 0

 #include <stdio.h>
 int main() {

 int a = 15, b = 24;

 printf("a == b 결과는 %d\n", a == b);		// == : 같은지 여부 (비교연산자)
 
 printf("a > b 결과는 %d\n", a > b);		// a가 b보다 큰지 확인 

 printf("a >= b 결과는 %d\n", a >= b);		// a가 b보다 크거나 같은지 확인 
 
 printf("a < b 결과는 %d\n", a < b);		// b가 a보다 큰지 확인 

 printf("a <= b 결과는 %d\n", a <= b);		// b가 a보다 크거나 같은지 확인 

 printf("a != b 결과는 %d\n", a != b);		!= : 다른지 여부


 return 0;
 }




----------------------------------------------------------------------------------------------------------------------

 [ 논리 연산자 ]

  #include <stdio.h>
	 int main() {
  	
	// AND연산자(&&)
  	// 1. 왼쪽이 거짓이라면 오른쪽을 연산하지 않는다.
 	// 2. && 연산자는 일반적으로 "||"연산자보다 우선순외가 높다.
 	// 3. && 연산자의 결과는 논리값 (참 또는 거짓)이다.
	
	int a1 = 60;
	// a1이 20보다 크고 a1이 30보다 크다면, 두개의 조건을 모두 만족한다면 true 아니라면 false출력
	printf("a1 > 20 && a1 > 30 결과는 %d\n", a1 > 20 && a1 > 30);
	// a1이 15보다 크고 a1이 360보다 작다면, 두개의 조건을 모두 만족한다면 true 아니라면 false출력
	printf("a1 > 15 && a1 < 60 결과는 %d\n", a1 > 15 && a1 < 60);



 	
	// OR 연산자(||) 왼쪽, 오른쪽 식 중 한나라도 참이면 True 값이 뜬다.
  	int a = 5, b = 9;
	printf("a == b || a < b 결과는 %d\n", a == b || a< b);

	


	// not연산자(!)
	printf("!참의 결과는 %d\n", !10);	// 참을 부정
	printf("!거짓의 결과는 %d\n", 10);	// 거짓을 부정

 return 0;
 }


----------------------------------------------------------------------------------------------------------------------

 [ 문제 ]

 연산자 기호를 써서 아래를 만족하도록 코딩한다.
 
 - a가 b와 같고 a는 10보다 크고 b도 10보다 큰지 출력
 - a가 b보다 크고 a가 c보다 크고 a가 0이 아닌지 확인하여 출력

 [결과값]
 정수값 a, b, c 변수를 저장하세요. 1 2 3

 a == b && a > 10 && b > 10의 결과는 0

 a > b && a > c && a != 0의 결과는 0


  #include <stdio.h>
  int main() {
	int a = 0, b = 0, c = 0;

	printf("정수값 a, b, c 변수를 저장하세요.");
	printf("\n");
	scanf_s("%d %d %d", &a, &b, &c);

	printf("\n");

	// a가 b와 같고 a가 10보다 크고 b가 10보다 크다면, 모든 조건이 만족한다면 true, 아니라면 false출력
	printf("a == b && a > 10 && b > 10의 결과는 %d\n", a == b && a > 10 && b > 10);
	printf("\n");

	// a가 b보다 크고 a가 c보다 크고 a가 0이 아니라면, 모든 조건이 만족한다면 true, 아니라면 false출력
	printf("a > b && a > c && a != 0의 결과는 %d\n", a > b && a > c && a != 0);

	return 0;
 }

----------------------------------------------------------------------------------------------------------------------

 [ 증감연산자 ]

 1. 전치연산자 (++a, --a) : 다른 연산 처리 이전에 1 증가 및 감소
 
 2. 후치연산자 (a++, a--) : 다른 연산 처리 이후에 1 증가 및 감소



----------------------------------------------------------------------------------------------------------------------

 [ 삼항연산자 문제 ]
 
 짝수 / 홀수 구분하는 코드를 만드시오 ( 단 키보드로 입력 받으시오
 삼항 연산자를 사용! scanf_s() 함수도 사용

 
 #include <stdio.h>
 int main() {

	int num;

	printf("짝수 홀수를 구분할 정수 하나를 입력하시오>>>\n");
	scanf_s("%d", &num);
	
	// num에 담긴 값이 2로 나눈 후 나머지 값이 0이라면 짝수 출력 아니라면 홀수 출력
	(num % 2 == 0) ? printf("짝수 : %d\n", num) : printf("홀수 : %d\n", num);
	

	return 0;
}



----------------------------------------------------------------------------------------------------------------------

 [ 분기문 ]
 
 조건문과 반복문 중간에서 코드블럭을 나눠서 처리하는 문법
 그 예로는 if문, switch문 등이 있다.

 IF문
 조건문을 작설할 때 사용하는 구문.

 조건식이 참이라면 코드 블럭을 실행
 조건식이 거짓이라면 코드 블럭을 무시(스킵)
  )else문을 통해 조건이 거짓일 경우의 실행코드를 지정 할 수 있다.

 조건식은 참 또는 거짓을 판단할 수 있는 식이여야만 한다.
 참과 거짓, 0과1



----------------------------------------------------------------------------------------------------------------------

 문제) 
 int n = 12345
 차례대로 오른쪽 끝에서 한자리 ~ 네자리까지 출력되도록 코딩한다.
 차례대로 왼쪽 끝 한자리 ~ 네자리까지 출력되도록 코딩한다.
 [ 결과값 ]
 정수를 입력하세요 >> 12345
 오른쪽끝에서 한자리 = 5
 오른쪽끝에서 두자리 = 45
 오른쪽끝에서 세자리 = 345
 오른쪽끝에서 네자리 = 2345

 =========================

 왼쪽 끝에서 한자리 = 1
 왼쪽 끝에서 두자리 = 12
 왼쪽 끝에서 세자리 = 123
 왼쪽 끝에서 네자리 = 1234



 #include <stdio.h>
int main() {
	
	int n[5] = { 1,2,3,4,5 };				// int형 n이라는 배열 선언, 크기가 5, {1,2,3,4,5}값을 n에 삽입

	printf("오른쪽끝에서 한자리 : %d\n", n[4]);			// 배열의 [4]에 위치한 5를 출력
	printf("오른쪽끝에서 두자리 : %d%d\n",n[3], n[4]);			// 배열의 [3][4]에 위치한 4,5를 출력
	printf("오른쪽끝에서 세자리 : %d%d%d\n", n[2], n[3], n[4]);		// 배열의 [2][3][4]에 위치한 3,4,5를 출력
	printf("오른쪽끝에서 네자리 : %d%d%d%d\n", n[1], n[2], n[3], n[4]);	// 배열의 [1][2][3][4]에 위치한 2,3,4,5를 출력
	printf("\n");
	printf("============================\n");
	printf("\n");
	printf("왼쪽 끝에서 한자리 : %d\n", n[0]);			// 배열의 [0]에 위치한 1를 출력
	printf("왼쪽 끝에서 한자리 : %d%d\n", n[0], n[1]);			// 배열의 [0][1]에 위치한 1,2를 출력
	printf("왼쪽 끝에서 한자리 : %d%d%d\n", n[0], n[1], n[2]);		// 배열의 [0][1][2]에 위치한 1,2,3를 출력
	printf("왼쪽 끝에서 한자리 : %d%d%d%d\n", n[0], n[1], n[2], n[3]);	// 배열의 [0][1][2][3]에 위치한 1,2,3,4를 출력

	return 0;
}



----------------------------------------------------------------------------------------------------------------------

 문제) 두 수를 입력받아 큰 수를 출력하세요


 #include <stdio.h>
 int main() {

	int n1 = 0, n2 = 0;
	printf("두개의 정수를 입력하세요>>>\n");
	scanf_s("%d%d", &n1, &n2);

	if (n1 > n2) {							// n1이 n2보다 크다면?
		printf(" 두 개의 수 중 더 큰 수는 %d입니다.>>>\n", n1);		// n1을 출력
	}
	else {								// 아니라면 ?						
		printf(" 두 개의 수 중 더 큰 수는 %d입니다.>>>\n", n2);		// n2를 출력	
	}

	return 0;
 }



