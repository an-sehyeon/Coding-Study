

 [ 지역변수 (LocaL Variable) ]

 - 특정구역 ( { } ) 내에서 생성되어 그 구역에서만 사용 가능한 변수, 즉 함수 속에서
  선언되어 함수 속에서만 사용가능한 변수
 - 함수나 {}이 끝나게 되면 메모리에서 소멸

 
 #include <stdio.h>
 void func() {
	int num = 10;				// 지역변수
	num++;
	printf("첫 번째 num = %d\n", num);		// 11
 }

 int main(void) {
	int num = 10;				// 전역변수
	num++;					// 전역변수인 num 값에 +1
	num++;
	func();					// func함수 호출
	printf("두 번째 num = %d\n", num);

 }






#include <stdio.h>
int main() {

	int num = 10;					// 전역변수

	if (num % 2 == 0) {
		int num = 12;				// if문 안의 num은 지역변수
		printf("if  안의 num = %d\n", num);
	}
	printf("main의 num = %d\n", num);


	for (int i = 0; i < 3; i++) {
		int num = i;
		printf("for안의 num = %d\n", num);
	}

	pritnf("main의 num =%d\n", num);
	return 0;
 }



================================================================


 [ 전역 변수 (Global Variable) ]

 - 어느 위치에서든 호출하면 사용이 가능한 변수 즉, 함수 밖에서 선언하여 클래스 전체에서
 사용이 가능한 변수

 - 1. 전역변수는 프로그램 전체에서 사용가능한 변수이다.
 - 프로그램이 종료될 때까지 메모리에서 유지된다.

 - 2. 전역변수는 프로그램 내에서 어디에서든지 사용할 수 있으므로,
 - 프로그램의 다른 부분에서 변수명이 중복되어 사용될 가능성이 있다.
 - 따라서 전역변수는 가능한 사용을 최소화해야 된다.


#include <stdio.h>
int num = 10;				// 전역변수

void Func1() {
	int num = 5;			// 지역변수
	num++;
	printf("num =%d\n", num);

}
void Func2() {
	num++;				// func2내에서 따로 변수를 생성하지 않았으므로
	printf("num =%d\n", num);		// num은 전역변수

}
void Func3() {
	num++;
	printf("num =%d\n", num);

}

int main() {
	Func1();				// Func1함수 호출
	Func2();				// Func2함수 호출
	Func3();				// Func3함수 호출

}




================================================================



 [ 문제 ]

 - sum이라는 함수를 만들어서 그 안에 로직을 구성하고 밑에 있는 문제를 해결하시오.
 - 정수를 입력하세요>>> 100
 - 1부터 100까지의 합은 5050입니다 



 #include <stdio.h>	
 int sum(int x) {				// 함수명 sum (매개변수 : x)
	int sum = 0;			// 1부터 x까지의 총 합을 담아줄 변수명
	
	for (int i = 1; i <= x; i++) {		// 1부터 x까지 총합을 계산하는 반복문	
		sum += i;			// int i가 1씩 증가할때마다 sum에 값을 저정하고 더해줌  
		
	}
	printf("1부터 %d까지의 합은 %d입니다.\n", x, sum);
 }

 int main(void) {
	sum(100);				// 함수 sum에 인자값 100 지정
 }



================================================================


 [ 배열 (Array) ]

 - 배열이란 ? : 연관된 데이터를 각각의 인덱스 번호를 할당하여 나열한 자료 구조 형태.

	- 인덱스		 0	1	2	3	4	5	6  
	- 자료		[12	123	231	153	76	48	126]
 - 이때 배열의 인덱스 번호로 배열 안의 자료(데이터)에 접근할 수 있다.

 - index는 '색인' 이라는 뜻을 지님.
 - 이때 색인이란 필요한 정보를 쉽게 찾을 수 있도록 하는 것
 - 예로 들자면 책의 인덱스, 즉 목차를 말함

 



================================================================



 [ 배열의 필요성 ]
 
 - 예를 들어 병원에 환자의 번호를 매겨야 할 때를 가정해보자
 - int patient01;
 - int patient02;
 - int patient03;
  ...
 - int patient9999;

 - 이런식으로 여러번 같은 작업을 반복해야되는데
 - 배열을 사용한다면
 - int patient[9999];
 - 이런식으로 간단하세 정리할 수 있기에 배열은 꼭 필요한 자료구조이다.

 - 즉, 배열은 인덱스를 사용하면 각 요소에 대한 접근이 용이하다.

 - int patient[0] = 10;		// patient 배열의 첫번째 요소에 10을 저장
 - int patient[12] = 100;		// patient 배열의 열세번째 요소에 100을 저장
 - 인덱스는 0부터 시작이기 때문에 0이 첫번째 요소임.



================================================================



 [ 배열의 선언 ]
 
 - int		arr		[5]
 - int(자료형)  	arr(배열이름)	[5](배열크기)

 - int score[60];			// 60개의 int형 값을 지니는 배열 score
 - float cost[12];			// 12개의 float형 값을 지니는 배열 cost
 - char name[50];			// 50개의 char형 값을 지니는 배열 name
 - char src[10], dst[10];		// 2개의 문자형 배열을 동시에 선언	
 - int index, days[7];		// 일반 변수와 배열을 동시에 선언



 #include <stdio.h>
 int main() {

	int arr[] = { 1,2,3,4,5, };			// 요소를 5개 가지는 int형 배열 arr

	for (int i = 0; i < 5; i++) {
		printf("%d\n", arr[i]);		// arr[0], arr[1], arr[2], arr[3], arr[4]
	}

 }



================================================================


 #include <stdio.h>
 int main() {

	int grade[10];			// grade  배열을 선언, int형, 크기가 10	
	for (int i = 0; i < 10; i++) {		// 각각의 0번째 인덱스 ~ 9번째 인덱스까지의 
		grade[i] = i + 1;		// 값을 대입하는 과정
	}
	printf("인덱스\t값\n");

	for (int i = 0; i < 10; i++) {
		printf("%d\t%d\n", i, grade[i]);
	}

 }





================================================================

 #include <stdio.h>
 int main(void) {

	// grade 배열명에 10개의 값을 저장
	int grade[10] = { 121,120,119,118,117,116,115,114,113,112 };

	printf("인덱스\t\t값\n");

	for (int i = 0; i < 10; i++){
	printf("%d\t\t%d\n", i, grade[i]);
	}

	return 0;
 }


================================================================



 [ 전처리문 define ]

 - define : C/C++에서 사용하는 전처리기 지시문이다. 상수 또는 매크로를 정의할 수 있다.



 #include <stdio.h>
 #define STUDENTS 6				// define 매크로 함수사용해서 ( STUDENTS == 6) 정의 
 int main(void) {					// 전처리문을 사용하면 컴파일시 속도가 빠름
						// 가독성이 좋다, 한번 정의해두면 사용자가 찾기쉽고 사용하기 편함	
	int grade[STUDENTS];
	int sum = 0;
	int average = 0;
	for (int i = 0; i < STUDENTS; i++) {
		printf("학생들의 성적을 입력해주세요 >>>");
		scanf_s("%d", &grade[i]);
		sum += grade[i];
	}
	average = sum / STUDENTS;
	printf("성적 평균 = %d\n", average);
	return 0;
 }




================================================================


 [ 문제1 ]
 
 - 5개의 정수를 저장할 수 있는 배열을 선언하고 모든 요소를 0으로 초기화 하십시오.
 - 그리고 배열을 출력하시오

 - Tip) 크기 : 5, 자료형 : int, 모든 요소를 0으로 초기화, 배열 출력 


 #include <stdio.h>
 int main(void) {
	int arr[5] = {0};				// 배열을 0으로 초기화

	for (int i = 0; i < 5; i++) {			// 1부터 5까지 증가하는 i를 배열의 값에 넣는다
		printf("%d\n",arr[i]);
	}
	return 0;

 }



================================================================


 [ 문제2 ]

 - 5개의 정수를 저장할 수 있는 배열을 선언하고 사용자로부터 5개의 정수를 입력받아
  배열에 저장하시오
 - 그리고 배열을 출력하시오


 #include <stdio.h>
 int main(void) {
	
	int arr[5];
	
	for (int i = 0; i < 5; i++) {				// 사용자로부터 정수 5번을 입력받음
		printf("정수 5개를 입력하세요>>>\n");
		scanf_s("%d", &arr[i]);
	}

	//배열출력					// 입력받은 5개의 정수를 각 배열에 저장 후 출력
	for (int i = 0; i < 5; i++) {
		printf("%d\n", arr[i]);
	}

	return 0;
 }



================================================================


 [ 문제3 ]

 - 10개의 정수를 저장할 수 있는 배열을 선언하고 배열을 역순으로 초기화합십시오.
 - 그리고 배열을 출력하시오


 #include <stdio.h>
 int main(void) {
	
	int arr[10];
	
	for (int i = 0; i < 10; i++) {		// i를 1부터 9까지 1씩증가하며 반복
		arr[i] = 10 - i;		// arr[]안에 들어가는 값은 10-i값 ( 9부터 1까지 역순)

	}
	// 배열출력
	for (int i = 0; i < 10; i++) {		// 9부터 1까지의 역순으로 배열 출력
		printf("%d\n", arr[i]);
	}

	return 0;
 }



================================================================



 [ 문제4 ]

 - 3명의 학생의 시험 점수를 저장하는 배열을 선언하고, 사용자로부터 점수를 입력받아
 배열에 저장하시오
 - 그리고 평균 점수를 계산하여 출력하시오


 #include <stdio.h>
 int main(void) {
	
	int scores[3];				// 점수나타내는 변수
	int total = 0;				// 점수의 합계 변수

	for (int i = 0; i < 3; i++) {			// 3번의 값을 받을 조건	
		printf("학생 %d의 점수 : ", i + 1);	// i +1 = 총 3			
		scanf_s("%d", &scores[i]);				
		total += scores[i];			// total에 i의 총합 저장	
	}

	float average = (float)total / 3;		// total의 평균을 내기위한 변수		

	printf("평균 점수 : %.wf\n", average);				
	return 0;
 }




================================================================



 [ 문제5 ]

 - 정수로 이루어진 배열을 선언하고, 배열에 저장된 모든 정수의 합을 계산하여 출력하시오


 #include <stdio.h>
 int main(void) {
	int arr[] = { 3,7,2,8,5 };		// arr배열의 값 삽입
	int sum = 0;			// 배열에 저장된 정수 총합 담을 변수

	// 배열의 합 계산
	for (int i = 0; i < 5; i++) {		// i 0부터 4까지 1씩 증가하며 반복
		sum += arr[i];		// 0번째부터 4번째 배열 값을 sum변수에 저장하며 모두 더해줌

	}
	printf("배열의 합은 %d\n", sum);
	
	return 0;
 }




================================================================



 [ 포인터 ]

 - 포인터란 ? : 메모리 주소를 저장하고 메모리 내의 데이터에 '간접적으로' 접근


 - 1) 포인터 사용이유
 
 -  메모리를 효율적으로 사용할 수 있다.

 -  동적 메모리 할당을 통해 런타임에 필요한 메모리를 동적으로 조절하는데 용이. 
     --> 즉 , 힙영역에 접근과 조작이 용이

 -  다른 주소를 참조하기 때문에 다양한 접근과 조작이 가능.

 


================================================================


 - 2) 포인터의 크기와 사용법

 - 포인터는 기본적으로 시스템의 아키텍처와 컴파일러에 따라 다를 수 있다.
 - 32비트 시스템 - > 4바이트
 - 64비트 시스템 - > 8바이트

 - 이는 대댜수의 32비트 시스템에서의 표준 크기

 - 하지만 변수의 크기에 따라 차지하는 메모리 공간이 달라짐
 - char형 변수 : 1바이트
 - int형 변수 : 4바이트
 - float형 변수 : 4바이트
 - double형 변수 : 8바이트




 - [ 사용법 ]

 - 1. 포인터의 선언
 - 포인터를 선언할 때 변수의 자료형과 포인터 연산자 '*'을 사용한다.

 - int * ptr; 	// 정수형 포인터 ptr 선언

 - 2. 포인터에 메모리 주소 저장
 - 포인터 변수에 따른 변수의 메모리 주소를 저장
 - 이때는 주소 연산자 '&'를 사용합니다.

 - int x = 10;
 - int * ptr = &x; 	// ptr은 x의 주소를 가리킴.

 - 3. 포인터를 사용하여 값 접근
 - 포인터를 사용하여 다른 변수의 값을 읽거나 변경
 - 이때는 간접 참조 연산자 '*'를 사용한다.

 -  * ptr = 20;		// ptr이 가리키는 곳에 20을 저장( x의 값을 변경 )




================================================================



 [ 포인터와 연산자 ]

 - 주소 연산자 ( & ) : 변수 앞에 변수가 할당된 메모리의 시작값을 알려줌.
 - int a = 20; 		// 메모리에 1000 ~1003번지의 4바이트 공간에 20을 할당
 - a + 20 		// 위 공간에 저장된 값과 20을 더하는 연산
 

 - 주소 연산자 ( & )
 - 주소를 음수가 아닌 부호없는 정수로 나타내고 싶으면 출력할 때 %u 변환문자를 사용한다.
 - %x나 %p는 16진수로 나타내는 형식 지정자

 - 간접참조 연산자 (*) 
 - 포인터에 사용하며 포인터가 가리키는 변수의 값을 의미.



 #include <stdio.h>
 int main() {

	int num = 42;
	int* ptr = &num;		// 포인터 ptr가 정수  num을 가리킴

	int value = *ptr;		// *ptr을 사용하여 ptr가 가리키는 메모리 위치의 값을 읽음
	printf("메모리 위치 %p에 저장된 값 : %d\n", (void*)ptr, value);

	return 0;
 }



================================================================



 #include <stdio.h>
 int main(void) {
	int i = 3000;
	int* p = &i;				//변수와 포인터 연결

	printf("&i = %u\n", &i);			// 변수의 주소 출력
	printf("p = %u\n", p);			// 포인터의 주소값 출력

	printf("i = %d\n", i);			// 변수의 값 출력
	printf("*p = %d\n", *p);			// 포인터를 통한 간접 참조 값 출력


	return 0;
 }




================================================================


 [ 포인터 사용시 주의점 ]

 - 첫번째 주의점

 #include <stdio.h>
 int main() {

	// 포인터의 타입과 변수의 타입은 일치하여야 한다.
 	int i;
	double* pd;

	pd = &i;		// &은 주소연산자
	*pd = 36.5;	// *은 메모리 위치 값
	
 return 0;
 }



================================================================


 - 두번째 주의점

 #include <stdio.h>
 int main(void) {

 	int* p;		// 포인터 p는 초기화가 안되어 있음.

	*p = 100; 	// 위험한 코드

 return 0;
 }



================================================================


 - 세번째 주의점
 
 - 1. 포인터가 아무것도 가리키고 있지 않는 경우에는 NULL로 초기화

 - 2. NULL 포인터를 가지고 간접 참조하면 하드웨어로 감지할 수 있다.
  ++) 일반적인 운영체제나 하드웨어에서 NULL포인터를 참조하려고 시도하면
        일반적으로 예외가 발생한다는걸 의미함.

 - 3. 포인터의 유효성 여부 판단이 쉽다.
  ++) 포인터가 유효한 메모리 영역을 가리키는지 여부를 쉽게 확인할 수 있다는 것을 의미


 #include <stdio.h>
 int main() {

 	int* p_num = NULL;			// 포인터 변수가 아무것도 가리키고 있지 않을때는 null로 초기화해야됨

 	if ( p_num == NULL) {
		printf("포인터 변수가 NULL을 가리킵니다.\n");
	} else{
		printf("포인터 변수가 NULL을 가리키지 않습니다.\n");
	}

 return 0;
 }

	// scanf_s 함수는 사용자로부터 입력을 받을 때, 메모리 영역을 벗어나는 오류를 방지하기 위해
	// 입력 값을 저정할 변수의 주소를 입력해야 한다.



================================================================



 [ 문제 1 ]
 
 - 정수형 변수 a에 10을 저장하고, 이 변수의 값을 포인터를 사용하여 출력하시오
 - 변수 : a 포인터 변수 p_a

 #include <stdio.h>
 int main() {
	int a = 10;
	int* p_a = &a;			// p_a = 10

	printf("a의 값 : %d\n", *p_a);		// 포인터가 가리키는 위치(a)의 값 (10)

	return 0;
 }



================================================================



 [ 문제 2 ]

 - 두개의 정수를 입력받아 두 정수의 값을 서로 바꾸는 프로그램을 작성하시오. 
  이때 포인터를 사용하여 값을 교환하시오.


 #include <stdio.h>
 int main(void) {
	
	int x = 0, y = 0;			// 정수 두개를 입력 받을 int 타입의 변수명 x, y 생성
	int* p_a, * p_b;			// int 타입의 포인터 p_a, p_b 생성
	

	printf("정수 2개를 입력하세요>>>\n");
	scanf_s("%d%d", &x, &y);		

	p_a = &x;			// 포인터와 변수 연결
	p_b = &y;

	int tmp = * p_a;			// 정수의 값을 바꾸기 위한 tmp라는 빈공간의 변수 생성
	*p_a = *p_b;
	*p_b = tmp;

	printf("정수 2개의 위치가 바뀌었습니다.>>>\n");
	printf("a = %d, b = %d\n", x,y);


	return 0;
 }
