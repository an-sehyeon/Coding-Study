
 [ 복습 포인터 문제 1 ]

 - 포인터를 사용하여 두 개의 정수를 입력받아, 그 합과 차를 구하는 프로그램 작성
 - 두가지 방식으로 작성

 - 포인터가 가리키는 공간의 값을 간접 참조해서 값을 출력


 #include <stdio.h>
 int main(void) {

	printf("두개의 정수를 입력하세요>>>\n");
	int n1 = 0, n2 = 0;				// 포인터변수를 담을 변수
	int* a = &n1;					// 포인터변수인 a와 변수n1을 연결
	int* b = &n2;					// 포인터변수인 b와 변수n2을 연결

	scanf_s("%d%d", a, b);				// 포인터a와 b가 가리키는 변수에 입력받은 값 저장
	

	
	printf("입력받은 두 수의 합 :  %d\n",*a+*b);
	printf("입력받은 두 수의 차 :  %d\n", *a - *b);

	return 0;
 }




 - 포인터가 가리키는 공간의 값을 간접 참조해서 값을 변수에 담아 출력


 #include <stdio.h>
 int main(void) {

	printf("두개의 정수를 입력하세요>>>\n");
	int n1 = 0, n2 = 0;				// 포인터변수를 담을 변수
	int* a = &n1;					// 포인터변수인 a와 변수n1을 연결
	int* b = &n2;					// 포인터변수인 b와 변수n2을 연결

	scanf_s("%d%d", a, b);				// 포인터a와 b가 가리키는 변수에 입력받은 값 저장
	

	int sum = *a + *b;				// a의 값과 b의 값을 더한 값을 담은 변수
	int min = *a - *b;				// a의 값과 b의 값을 뺀 값을 담은 변수
	printf("입력받은 두 수의 합 :  %d\n입력받은 두 수의 차 : %d\n", sum, min);

	return 0;
 }




==============================================================================

 [ 다차원 배열의 이해 ]

 - 다차원 배열 : 2차원 이상의 배열을 의미
 - 배열의 요소가 선형적으로 나열되어 있는 1차원 배열과는 구조가 다르다.

 - 2차원 배열은 행(row)과 열(column)이라는 두가지 차원
 - 이때 요소들은 행가 열에 따라 구조화되어 저장

 - 선형적이란? 
 - 어떤 값에 기울기를 곱한 상태 == > 즉 선으로 나타낼 수 있음. (수학의 그래프 생각하면 됨)

 - 1. 1차원 배열
 - int arr1[10];		// 가로 길이가 10인 1차원 배열
 
 - 2. 2차원 배열
 - int arr2[3][2];		// 세로 길이가 3이고 가로 길이가 2인 2차원 배열
    
 - 3. 3차원 배열
 - int arr3[3][2][4];	// 높이가 3이고 세로길이가 2 가로 길이가 4인 3차원 배열
 
   

 EX)

 #include <stdio.h>
 int main(void) {

	int arr[3][4] = { {1,2,3,4},{5,6,7,8},{9,10,11,12} };	// 세로3, 가로4인 2차원 배열에 값 삽입

	// 배열의 모든 요소 출력하기
	for (int i = 0; i < 3; i++) {				// 세로가 3줄이될때까지 증감
		for (int j = 0; j < 4; j++) {			// 가로가 4가 될때까지 증감
			printf("%d\t", arr[i][j]);		// 반복문 조건에 맞게 배열안에 값 삽입
		}
		printf("\n");
	}

	// 배열의 요소값을 모두 22로 변경
	for (int i = 0; i < 3; i++) {				 
		for (int j = 0; j < 4; j++) {			 
			arr[i][j] = 22;			// 배열 i와 j의 값 모두 22로 설정
		}
		printf("\n");
	}

	// 다시 모든 배열의 모든 요소 출력하기
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 4; j++) {
			printf("%d\t", arr[i][j]);
		}
		printf("\n");
	}

	return 0;
 }


==============================================================================


 [ 문제 1 ]
 
 - 크기가 3 x 3인 2차원 배열을 선언하고, 사용자로부터 9개의 정수 값을 입력받아
 - 배열에 저장한 뒤 배열에 저장된 값들을 출력하는 프로그램 작성
 
 - 예시
 - 정수 9개를 입력하세요
  123
  456
  789
 
 배열에 저장된 값 :
 123 
 456
 789


 #include <stdio.h>
 int main(void) {
		
	int arr[3][3];				// 3 x 3크기의 배열 선언
	printf("정수 9개를 입력하세요>>>\n");		
	
	for (int i = 0; i < 3; i++) {			// 9개의 정수 값을 입력받아서 배열에 저장
		for (int j = 0; j < 3; j++) {
			scanf_s("%d", &arr[i][j]);
		}
	}
	
	printf("\n배열에 저장된 값 : \n");		// 배열에 저장된 값들을 출력
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			printf("%d", arr[i][j]);
		}
		printf("\n");
	}


	return 0;
 }


==============================================================================


 [ 다차원 배열 인수 ]

 #include <stdio.h>
 #define ROWS 3		// 상수 정의 행 : 3
 #define CLOS 4		// 상수 정의 열 : 4

 int main(void) {

	int matrix[ROWS][CLOS] = {			// 이차원 배열 선언과 초기화
		{1,2,3,4},
		{5,6,7,8},
		{9,10,11,12},
	};

	printf("이차원 배열 요소 : \n");			// 배열 요소 출력
	for (int i = 0; i < ROWS; i++) {		// i가 행(3)까지 증감
		for (int j = 0; j < CLOS; j++) {	// j는 열(4)까지 증감
			printf("%d\t", matrix[i][j]);	// matrix배열 출력
		}
		printf("\n");
	}

	return 0;
 }




==============================================================================


 [ 문제1 ]

 - 전처리기 지시문 #define을 사용하여 years와 products 상수를 정의하고,
 - 이차원 배열 sales에 대한 매출 데이터를 가지고 총 매출을 계산하는 프로그램


 #include <stdio.h>
 #define years 3					// years 상수 3으로 지정
 #define products 3				// products 상수 3으로 지정
 int sum(int grade[years][products]) {			// sum이라는 함수에 grade배열 행(years) 열(products)값을 담음

	int total = 0;					// total이라는 지역변수 생성
	for (int y = 0; y < years; y++) {			// y는 years값 까지 증감
		for (int p = 0; p < products; p++) {		// p는 products값 까지 증감
			total += grade[y][p];		// total은 grade배열안의 모든 값을 더해준 값을 담은 변수
		}
	}

	return total;					// total을 리턴해줌
 }

 int main(void) {

	int sales[years][products] = {		// sales라는 변수 생성, 세로(3) 가로(3)
	{1,2,3},					// 배열안의 값 초기화
	{4,5,6},
	{7,8,9}
	};
	int total_sale;				// total_sale라는 변수 생성
	total_sale = sum(sales);			// sum 함수에 grade배열의 조건과 sales의 값과 대입 == total_sale

	printf("총 매출은 %d 입니다\n", total_sale);

	return 0;
 }


==============================================================================


 [ 문제2 ]

 - #define을 사용하여 Class와 Students 상수를 정의하고
 - 이차원 배열을 사용하여 학급별 학생의 성적을 저장하고,
 - 학급별 및 전체 평균 성적을 계산하는 프로그램

 - 3개의 Class와 5명의 Students를 #define으로 정의
 - 거기에 해당하는 배열 arr을 정의 { 각 요소(성적)을 임의로 저장 }

 - 각 학급의 평균을 구하고 이를 출력하는 코드를 작성하고,
 - 다시 전체의 학급의 평균을 구하고 출력하는 코드를 작성

 - 단, 배열 정의 이후 가장 먼저 할 것 : 네게의 변수 선언!



 #include <stdio.h>
 #define Class 3								// Class 상수 정의 
 #define Students 5							// Student 상수 정의



 int main(void) {

	int arr[Class][Students] = {						// arr배열 행(3) 열(5)
		{100,70,20,30,15},						// 배열안에 들어갈 값 초기화 
		{100,41,11,14,31},			 
		{20,41,82,29,31}
	};

	float subtotal = 0;							// 같은 행의 총합을 담을 변수(실수형)
	float total = 0;							// 총 합을 담을 변수(실수형)
	
	for (int cls = 0; cls < Class; cls++) {					// cls가 Class값까지 조건문 반복
		subtotal = 0;						// 각 행의 총합을 더해 total에 담아주고 새로운 조건문이 시작될 때 subtotal을 0으로 리셋
		for (int stu = 0; stu < Students; stu++) {			// str가 Students값까지 조건문 반복
			subtotal += arr[cls][stu];				// 입력받은 값을 각 행과 열에 저장후
		}							// 같은 행의 값을 더한값을 subtotal변수에 저장

		
		printf("학급 %d의 평균 성적 = %.2f\n", cls, subtotal / Students);	// 같은 행의 값의 평균값, 소수점 2자리수까지 출력
		total += subtotal;						// 각 행의 총합을 전부 더한 값
	}
	printf("전체 학생들의 평균 성적 = %.2f\n", total / (Class * Students));	   	// 입력받은 모든 값을 더한 값 % (행 * 열) : 전체평균, 소수점 2자리수까지 출력



	return 0;
 }


==============================================================================


 [ 문자열과 포인터 ]

 - 문자 표현방법
 - 1. 아스키코드 ( ASCII Code ) : 7비트 부호 체계
 - 0부터 127까지의 숫자로 문자와 제어 문자를 나타냄
 - 주로 영문 알파벳, 숫자, 구두점 및 몇 가지 제어 문자에 사용



 2. 유니코드 ( UNI Code ) : 16비트 문자 체계
 - 초기에는 16비트로 표현되었지만 나중에 21비트로 확장
 - 거의 모든 세계 언어의 문자를 표현할 수 있게 됨.

 




==============================================================================


 [ 문자열과 포인터 예제 ]



 #include <stdio.h>
 int main(void) {

	int arr[3] = {1,2,3};
	// 배열이 가리키는 주소를 바꿀수 없는 이유가 생성으로부터 상수값으로 고정되어 있다.
	// 포인터 상수(Constant Pointer)


	char good[] = "good!";
	char* bad = "bad!";
	printf("%s %s\n", good, bad);


	// 밑의 문장은 컴파일러에서 경고나 에러 발생 X
	// 문자형 상수를 문자형 변수에 대입하려는 시도로 인해 잘못된 문장

	good[0] = "h";				// 주소값 변경
	printf("%s %s\n", good, bad);		// 문자 배열의 요소에 h 문자열을 대입하려고 시도



	// char* const test = "12345";		// 포인터 상수
	// 주소값 변경 X, 값 변경 O



	good[0] = 'h';				// 값 변경
	printf("%s %s\n", good, bad);		// 문자 배열의 요소에 h 문자를 대입하려는 시도

	// good = "new good";			// 불가능(컴파일 에러)
						// 배열기반 문자열은 새로운 주소값 할당 불가


	// bad[0] = 's';				// 불가능(실행은 되지만 값의 변화 X, 예외처리)
						// 포인터 기반 문자열은 개별 요소값이 할당X
	// printf("%s %s\n", good, bad);



	return 0;
 }







