
1. Node.js 소개
    - "Node.js는 Chrome V8 javascript 엔진으로 빌드된 Javascript 런타임"
      from Node.js 공식 홈페이지
      
    - Javascript 해석은 브라우저가 담당하며 브라우저 내의 Javascript 해석 엔진 보유
      브라우저의 종류에 따라 사용하는 엔진이 다르며, 인터넷 브라우저에서만 Javascript 실행 가능
    - Javascript의 V8 엔진으로 구글이 크롬을 개발, V8 엔진 성능이 너무 좋아서 새로운 프로젝트를 시작
      -> Node.js(V8)이 만들어짐 브라우저 외 환경에서 Javascript를 수행 가능
      -> 이게 무슨 장점 ?? => 자바스크립트가 웹 전용이 아닌 프로그래밍 언어로 사용 가능

    - Node.js가 웹 서버냐? 절대 아님
      아파치 웹 서버처럼 웹 디렉토리 설정, 서버 스타트 등 설정이 없음
      -> 대신 http서버를 라이브러리를 통해 직접 작성할 수 있다.
    - Node.js는 Javascript를 실행할 수 있는 하나의 환경
      Javascript 런타임


2. Node.js의 특징
    - 영화 티켓을 사려고 하는 고객의 예시
    - 1명이 수백장을 구매하고자 하면 그 뒤 고객은 대기
    - Node.js는 non-bloking IO를 사용함으로써 모든 요청을 한 번에 받고 빨리 처리되는 것은 빨리 리턴

    (1) 비동기 IO처리 / 이벤트 위주
        - Node.js의 라이브러리의 모든 API는 비동기 방식 - non blocking
          API가 실행되었을 때, 데이터를 반환할 때까지 기다리지 않고 다음 API를 실행
          실행했던 API가 결과값을 반환 시, Node.js의 이벤트 알림 메커니즘을 통해 결과값을 수신

    (2) 빠른 속도
        - 구글의 V8 자바스크립트 엔진 사용

    (3) 단일 스레드 / 뛰어난 확장성
        - 이벤트 루프 + 단일 스레드
        - 이벤트 루프는 서버가 멈추지 않고 반응하도록 해 줌
            -> 서버의 확장성을 키워줌
            -> 아파치에 비해 스레드를 한 개만 사용함으로써 더 많은 요청 처리 가능

    (4) No Buffering
        - 데이터 버퍼링 없이 데이터를 묶음으로 출력

    (5) 라이선스
        - MIT 라이선스 적용

    (6) 주 사용처
        - SNS나 채팅서비스에 많이 사용됨(요청이 많기 때문에)
        - 일반서버는 이 기능을 위해서는 멀티 스레드를 써야 함
        - Node.js는 요청이 많거나 오래걸리는 요청이 끼어 있어도 대기 시간이 발생하지 않음
            => 개수는 많으나 크기가 작은 데이터를 실시간으로 주고받는 어플리케이션에 최적 => 실시간 챗, 주식 차트 등

    (7) Node.js의 단점
        - 모든 처리를 단일 스레드가 처리하기 때문에 코드가 CPU 연산을 많이 요구할 경우 감당하기 어려움
        - 이미지, 비디오, 대규모 연산 등에는 절대 비권장


3. Node.js 실행해보기
    (1) 설치
        - Node.js 홈페이지에서 LTS 버전 설치
        - cmd 실행하고 node -v 또는 node -version 실행
        - node 실행 > console.log("Hello, world");

    (2) js 파일 실행 연습
        - src 폴더 생성
        - main.js를 만들고 console.log("Hello, world"); 작성

    (3) 웹 서버 띄우기
        - main.js에서 require함수로 http 불러오기
        - var http = require("http")
          require는 특정 라이브러리를 사용하기 위해 사용
        - http의 createServer 메서드를 이용하여 웹 서버 기동
          .listen(포트번호)로  포트 설정

    (4) REPL
        - Read Eval Print Loop
        - Windows Command처럼 shell을 통해 명령어 입력
        - 일번적으로 JS 코드를 테스팅 또는 디버깅 시 사용
        - node를 실행하여 시작
        - Ctrl + C 2연타 또는 Ctrl + D로 종료

    (5) NPM
        - Node Package Manager
        - Node.js의 패키지 설치 및 버전 / 호환성 관리
        - 현재 패키지에 맞는 다른 패키지 버전을 설치
        - npm install <설치할 모듈명>

    (6) Callback
        - 특정 작업을 하도록 함수를 전달하는 것
        - 전달하고 나서 다른 일을 계속 함
